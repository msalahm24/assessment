// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    phone_number
) VALUES (
    $1,$2
) 
RETURNING id, name, phone_number, otp, otp_expiration_time
`

type CreateUserParams struct {
	Name        string `json:"name"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.PhoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const getOTP = `-- name: GetOTP :one
SELECT otp, otp_expiration_time
FROM users
WHERE phone_number = $1
LIMIT 1
`

type GetOTPRow struct {
	Otp               pgtype.Text      `json:"otp"`
	OtpExpirationTime pgtype.Timestamp `json:"otp_expiration_time"`
}

func (q *Queries) GetOTP(ctx context.Context, phoneNumber string) (GetOTPRow, error) {
	row := q.db.QueryRow(ctx, getOTP, phoneNumber)
	var i GetOTPRow
	err := row.Scan(&i.Otp, &i.OtpExpirationTime)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, name, phone_number, otp, otp_expiration_time
FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const updateOTP = `-- name: UpdateOTP :one
UPDATE users 
SET otp = $2, otp_expiration_time = $3 
WHERE phone_number = $1
RETURNING id, name, phone_number, otp, otp_expiration_time
`

type UpdateOTPParams struct {
	PhoneNumber       string           `json:"phone_number"`
	Otp               pgtype.Text      `json:"otp"`
	OtpExpirationTime pgtype.Timestamp `json:"otp_expiration_time"`
}

func (q *Queries) UpdateOTP(ctx context.Context, arg UpdateOTPParams) (User, error) {
	row := q.db.QueryRow(ctx, updateOTP, arg.PhoneNumber, arg.Otp, arg.OtpExpirationTime)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}
